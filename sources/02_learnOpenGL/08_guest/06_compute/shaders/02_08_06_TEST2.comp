#version 430 core

layout (local_size_x = 10, local_size_y = 10, local_size_z = 1) in;

// sampler2D只能在着色器中读数据，image2D可以读也可以写数据
// imageLoad用来读，imageStore用来写
// 使用GL_ARB_shader_image_load_store扩展可以用sampler123D读写
layout(rgba32f, binding = 2) uniform image2D imgOutput;

// 计算着色器内置变量：
// const uvec3 gl_WorkGroupSize         本地工作组大小，就是local_size_x y z
// in    uvec3 gl_NumWorkGroups         glDispatchCompute的三个参数

// in    uvec3 gl_LocalInvocationID     当前执行单元在本地工作组中的位置，范围： [uvec3(0) , gl_WorkGroupSize - uvec3(1)]
// in    uvec3 gl_WorkGroupID           当前本地工作组在更大的全局工作组的位置，范围：[uvec3(0) , gl_NumWorkGroups-uvec3(1)]

// in    uvec3 gl_GlobalInvocationID    gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID 当前工作单元在全局工作组中的唯一索引
// in    uint  gl_LocalInvocationIndex  用1维数据表示2维或3维
//                                      gl_LocalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y + 
//                                      gl_LocalInvocationID.y * gl_WorkGroupSize.x + gl_LocalInvocationID.x

uniform float t;

void main()
{
    // vec4  = vec4(1.0, 0.0, 0.0, 1.0);
    // ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

    //------------------------------------------------------------------------------------------------
    vec4 pixel = vec4(0.0, 0.0, 0.0, 1.0);
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    
    float speed = 100;
    float width = 1000;

    pixel.x = mod(float(texelCoord.x) + t * speed, width) / (gl_NumWorkGroups.x * gl_WorkGroupSize.x);
    pixel.y = float(texelCoord.y) / (gl_NumWorkGroups.y * gl_WorkGroupSize.y);

    // 将像素保存到纹理图像中
    imageStore(imgOutput, texelCoord, pixel);
}